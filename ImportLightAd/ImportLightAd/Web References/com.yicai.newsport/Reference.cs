//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18444.
// 
#pragma warning disable 1591

namespace ImportLightAd.com.yicai.newsport {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="NewIWinServiceSoap", Namespace="http://tempuri.org/")]
    public partial class NewIWinService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CheckPwdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveUserInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetCustomerOffLineOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetCustomerOnOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetContractListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetContractDetailOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetKindListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GeCategoryListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetClientTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetZipFileDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataTestOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public NewIWinService() {
            this.Url = global::ImportLightAd.Properties.Settings.Default.ImportLightAd_com_yicai_newsport_NewIWinService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CheckPwdCompletedEventHandler CheckPwdCompleted;
        
        /// <remarks/>
        public event GetCustomerInfoCompletedEventHandler GetCustomerInfoCompleted;
        
        /// <remarks/>
        public event SaveUserInfoCompletedEventHandler SaveUserInfoCompleted;
        
        /// <remarks/>
        public event SetCustomerOffLineCompletedEventHandler SetCustomerOffLineCompleted;
        
        /// <remarks/>
        public event SetCustomerOnCompletedEventHandler SetCustomerOnCompleted;
        
        /// <remarks/>
        public event GetContractListCompletedEventHandler GetContractListCompleted;
        
        /// <remarks/>
        public event GetContractDetailCompletedEventHandler GetContractDetailCompleted;
        
        /// <remarks/>
        public event GetKindListCompletedEventHandler GetKindListCompleted;
        
        /// <remarks/>
        public event GeCategoryListCompletedEventHandler GeCategoryListCompleted;
        
        /// <remarks/>
        public event GetClientTypeCompletedEventHandler GetClientTypeCompleted;
        
        /// <remarks/>
        public event GetZipFileDataCompletedEventHandler GetZipFileDataCompleted;
        
        /// <remarks/>
        public event GetDataTestCompletedEventHandler GetDataTestCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckPwd", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable CheckPwd(string account, string password, string ip) {
            object[] results = this.Invoke("CheckPwd", new object[] {
                        account,
                        password,
                        ip});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void CheckPwdAsync(string account, string password, string ip) {
            this.CheckPwdAsync(account, password, ip, null);
        }
        
        /// <remarks/>
        public void CheckPwdAsync(string account, string password, string ip, object userState) {
            if ((this.CheckPwdOperationCompleted == null)) {
                this.CheckPwdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckPwdOperationCompleted);
            }
            this.InvokeAsync("CheckPwd", new object[] {
                        account,
                        password,
                        ip}, this.CheckPwdOperationCompleted, userState);
        }
        
        private void OnCheckPwdOperationCompleted(object arg) {
            if ((this.CheckPwdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckPwdCompleted(this, new CheckPwdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCustomerInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetCustomerInfo(string account, string password, string ip) {
            object[] results = this.Invoke("GetCustomerInfo", new object[] {
                        account,
                        password,
                        ip});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerInfoAsync(string account, string password, string ip) {
            this.GetCustomerInfoAsync(account, password, ip, null);
        }
        
        /// <remarks/>
        public void GetCustomerInfoAsync(string account, string password, string ip, object userState) {
            if ((this.GetCustomerInfoOperationCompleted == null)) {
                this.GetCustomerInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerInfoOperationCompleted);
            }
            this.InvokeAsync("GetCustomerInfo", new object[] {
                        account,
                        password,
                        ip}, this.GetCustomerInfoOperationCompleted, userState);
        }
        
        private void OnGetCustomerInfoOperationCompleted(object arg) {
            if ((this.GetCustomerInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerInfoCompleted(this, new GetCustomerInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SaveUserInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SaveUserInfo(int customerId, string Password, string Name, string Address, string ZipCode, string Phone, string Contact, string Fax, string oldPassword) {
            object[] results = this.Invoke("SaveUserInfo", new object[] {
                        customerId,
                        Password,
                        Name,
                        Address,
                        ZipCode,
                        Phone,
                        Contact,
                        Fax,
                        oldPassword});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SaveUserInfoAsync(int customerId, string Password, string Name, string Address, string ZipCode, string Phone, string Contact, string Fax, string oldPassword) {
            this.SaveUserInfoAsync(customerId, Password, Name, Address, ZipCode, Phone, Contact, Fax, oldPassword, null);
        }
        
        /// <remarks/>
        public void SaveUserInfoAsync(int customerId, string Password, string Name, string Address, string ZipCode, string Phone, string Contact, string Fax, string oldPassword, object userState) {
            if ((this.SaveUserInfoOperationCompleted == null)) {
                this.SaveUserInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveUserInfoOperationCompleted);
            }
            this.InvokeAsync("SaveUserInfo", new object[] {
                        customerId,
                        Password,
                        Name,
                        Address,
                        ZipCode,
                        Phone,
                        Contact,
                        Fax,
                        oldPassword}, this.SaveUserInfoOperationCompleted, userState);
        }
        
        private void OnSaveUserInfoOperationCompleted(object arg) {
            if ((this.SaveUserInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveUserInfoCompleted(this, new SaveUserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetCustomerOffLine", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetCustomerOffLine(int customerId, string ip) {
            this.Invoke("SetCustomerOffLine", new object[] {
                        customerId,
                        ip});
        }
        
        /// <remarks/>
        public void SetCustomerOffLineAsync(int customerId, string ip) {
            this.SetCustomerOffLineAsync(customerId, ip, null);
        }
        
        /// <remarks/>
        public void SetCustomerOffLineAsync(int customerId, string ip, object userState) {
            if ((this.SetCustomerOffLineOperationCompleted == null)) {
                this.SetCustomerOffLineOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetCustomerOffLineOperationCompleted);
            }
            this.InvokeAsync("SetCustomerOffLine", new object[] {
                        customerId,
                        ip}, this.SetCustomerOffLineOperationCompleted, userState);
        }
        
        private void OnSetCustomerOffLineOperationCompleted(object arg) {
            if ((this.SetCustomerOffLineCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetCustomerOffLineCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetCustomerOn", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetCustomerOn(int customerId, string ip) {
            this.Invoke("SetCustomerOn", new object[] {
                        customerId,
                        ip});
        }
        
        /// <remarks/>
        public void SetCustomerOnAsync(int customerId, string ip) {
            this.SetCustomerOnAsync(customerId, ip, null);
        }
        
        /// <remarks/>
        public void SetCustomerOnAsync(int customerId, string ip, object userState) {
            if ((this.SetCustomerOnOperationCompleted == null)) {
                this.SetCustomerOnOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetCustomerOnOperationCompleted);
            }
            this.InvokeAsync("SetCustomerOn", new object[] {
                        customerId,
                        ip}, this.SetCustomerOnOperationCompleted, userState);
        }
        
        private void OnSetCustomerOnOperationCompleted(object arg) {
            if ((this.SetCustomerOnCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetCustomerOnCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetContractList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetContractList(string account, string password) {
            object[] results = this.Invoke("GetContractList", new object[] {
                        account,
                        password});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetContractListAsync(string account, string password) {
            this.GetContractListAsync(account, password, null);
        }
        
        /// <remarks/>
        public void GetContractListAsync(string account, string password, object userState) {
            if ((this.GetContractListOperationCompleted == null)) {
                this.GetContractListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetContractListOperationCompleted);
            }
            this.InvokeAsync("GetContractList", new object[] {
                        account,
                        password}, this.GetContractListOperationCompleted, userState);
        }
        
        private void OnGetContractListOperationCompleted(object arg) {
            if ((this.GetContractListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetContractListCompleted(this, new GetContractListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetContractDetail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetContractDetail(string account, string password, int contractid) {
            object[] results = this.Invoke("GetContractDetail", new object[] {
                        account,
                        password,
                        contractid});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetContractDetailAsync(string account, string password, int contractid) {
            this.GetContractDetailAsync(account, password, contractid, null);
        }
        
        /// <remarks/>
        public void GetContractDetailAsync(string account, string password, int contractid, object userState) {
            if ((this.GetContractDetailOperationCompleted == null)) {
                this.GetContractDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetContractDetailOperationCompleted);
            }
            this.InvokeAsync("GetContractDetail", new object[] {
                        account,
                        password,
                        contractid}, this.GetContractDetailOperationCompleted, userState);
        }
        
        private void OnGetContractDetailOperationCompleted(object arg) {
            if ((this.GetContractDetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetContractDetailCompleted(this, new GetContractDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetKindList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetKindList(string account, string password) {
            object[] results = this.Invoke("GetKindList", new object[] {
                        account,
                        password});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetKindListAsync(string account, string password) {
            this.GetKindListAsync(account, password, null);
        }
        
        /// <remarks/>
        public void GetKindListAsync(string account, string password, object userState) {
            if ((this.GetKindListOperationCompleted == null)) {
                this.GetKindListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetKindListOperationCompleted);
            }
            this.InvokeAsync("GetKindList", new object[] {
                        account,
                        password}, this.GetKindListOperationCompleted, userState);
        }
        
        private void OnGetKindListOperationCompleted(object arg) {
            if ((this.GetKindListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetKindListCompleted(this, new GetKindListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GeCategoryList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GeCategoryList(string account, string password) {
            object[] results = this.Invoke("GeCategoryList", new object[] {
                        account,
                        password});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GeCategoryListAsync(string account, string password) {
            this.GeCategoryListAsync(account, password, null);
        }
        
        /// <remarks/>
        public void GeCategoryListAsync(string account, string password, object userState) {
            if ((this.GeCategoryListOperationCompleted == null)) {
                this.GeCategoryListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGeCategoryListOperationCompleted);
            }
            this.InvokeAsync("GeCategoryList", new object[] {
                        account,
                        password}, this.GeCategoryListOperationCompleted, userState);
        }
        
        private void OnGeCategoryListOperationCompleted(object arg) {
            if ((this.GeCategoryListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GeCategoryListCompleted(this, new GeCategoryListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetClientType", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetClientType(string account, string password) {
            object[] results = this.Invoke("GetClientType", new object[] {
                        account,
                        password});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetClientTypeAsync(string account, string password) {
            this.GetClientTypeAsync(account, password, null);
        }
        
        /// <remarks/>
        public void GetClientTypeAsync(string account, string password, object userState) {
            if ((this.GetClientTypeOperationCompleted == null)) {
                this.GetClientTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetClientTypeOperationCompleted);
            }
            this.InvokeAsync("GetClientType", new object[] {
                        account,
                        password}, this.GetClientTypeOperationCompleted, userState);
        }
        
        private void OnGetClientTypeOperationCompleted(object arg) {
            if ((this.GetClientTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetClientTypeCompleted(this, new GetClientTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetZipFileData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetZipFileData(string account, string password, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> nKindID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<System.DateTime> startTime, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<System.DateTime> endTime, string strIndustryIDs, string strPlateIDs, string strNewslabelIDs) {
            object[] results = this.Invoke("GetZipFileData", new object[] {
                        account,
                        password,
                        nKindID,
                        startTime,
                        endTime,
                        strIndustryIDs,
                        strPlateIDs,
                        strNewslabelIDs});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetZipFileDataAsync(string account, string password, System.Nullable<int> nKindID, System.Nullable<System.DateTime> startTime, System.Nullable<System.DateTime> endTime, string strIndustryIDs, string strPlateIDs, string strNewslabelIDs) {
            this.GetZipFileDataAsync(account, password, nKindID, startTime, endTime, strIndustryIDs, strPlateIDs, strNewslabelIDs, null);
        }
        
        /// <remarks/>
        public void GetZipFileDataAsync(string account, string password, System.Nullable<int> nKindID, System.Nullable<System.DateTime> startTime, System.Nullable<System.DateTime> endTime, string strIndustryIDs, string strPlateIDs, string strNewslabelIDs, object userState) {
            if ((this.GetZipFileDataOperationCompleted == null)) {
                this.GetZipFileDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetZipFileDataOperationCompleted);
            }
            this.InvokeAsync("GetZipFileData", new object[] {
                        account,
                        password,
                        nKindID,
                        startTime,
                        endTime,
                        strIndustryIDs,
                        strPlateIDs,
                        strNewslabelIDs}, this.GetZipFileDataOperationCompleted, userState);
        }
        
        private void OnGetZipFileDataOperationCompleted(object arg) {
            if ((this.GetZipFileDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetZipFileDataCompleted(this, new GetZipFileDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDataTest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDataTest(string account, string password, string startTime, string endTime) {
            object[] results = this.Invoke("GetDataTest", new object[] {
                        account,
                        password,
                        startTime,
                        endTime});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataTestAsync(string account, string password, string startTime, string endTime) {
            this.GetDataTestAsync(account, password, startTime, endTime, null);
        }
        
        /// <remarks/>
        public void GetDataTestAsync(string account, string password, string startTime, string endTime, object userState) {
            if ((this.GetDataTestOperationCompleted == null)) {
                this.GetDataTestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataTestOperationCompleted);
            }
            this.InvokeAsync("GetDataTest", new object[] {
                        account,
                        password,
                        startTime,
                        endTime}, this.GetDataTestOperationCompleted, userState);
        }
        
        private void OnGetDataTestOperationCompleted(object arg) {
            if ((this.GetDataTestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataTestCompleted(this, new GetDataTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void CheckPwdCompletedEventHandler(object sender, CheckPwdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckPwdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckPwdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetCustomerInfoCompletedEventHandler(object sender, GetCustomerInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SaveUserInfoCompletedEventHandler(object sender, SaveUserInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveUserInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveUserInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SetCustomerOffLineCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SetCustomerOnCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetContractListCompletedEventHandler(object sender, GetContractListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetContractListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetContractListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetContractDetailCompletedEventHandler(object sender, GetContractDetailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetContractDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetContractDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetKindListCompletedEventHandler(object sender, GetKindListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetKindListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetKindListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GeCategoryListCompletedEventHandler(object sender, GeCategoryListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GeCategoryListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GeCategoryListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetClientTypeCompletedEventHandler(object sender, GetClientTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetClientTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetClientTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetZipFileDataCompletedEventHandler(object sender, GetZipFileDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetZipFileDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetZipFileDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetDataTestCompletedEventHandler(object sender, GetDataTestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataTestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataTestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591